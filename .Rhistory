myED=try(ED(myLL,target,type="absolute",interval="delta"))
pod <- ifelse(myED[1] < min(x),NA,ifelse(myED[1]> max(x), NA, myED[1]))
#pod=myED[1]
podSE=myED[2]
podlower=myED[3]
podupper=myED[4]
myED[1]<-round(pod,5)
if (plot.it==T){
plot(myLL, broken=FALSE, xlab="Dose (mM)", ylab="Log2 (Mean Centered Normalized Counts)",type="all",col=2,cex=1.5,pch=7)
#title(main=paste0("LL.4: ", mydata$id[1]),sub=paste0("log10(LL.4_POD) = ",round(log10(myED[1]),2)," mM"))
mtext(paste0("LL4.AIC=",round(LL4_AIC,2),"; ResVar=",round(LL4_RSS,2)),cex=.7)
if (show.pod==T){
abline(h=target,col="purple",lwd=2,lty=2)
abline(v=log10(pod),col="red",lwd=2)
abline(h=0,col="black",lwd=2)
}
}
}
return(list(pod=log10(pod),podSE=podSE,podlower=podlower,podupper=podupper,LL4_AIC=LL4_AIC,LL4_RSS=LL4_RSS))
i=i+1
}
set.seed(1)
x= 1:5
y=x+rnorm(length(x))
getpod.2(x,y,plot.it=T,show.pod=T)
min(x)
getpod.2=function(x,y,plot.it=F,show.pod=F){
pod=NA;  podSE=NA;  podlower=NA;  podupper=NA; LL4_AIC=NA; LL4_RSS=NA
mydf=data.frame(x,y)
#mysd=sd(y[x==min(x)])
#mymu=mean(y[x==min(x)])
myLL = try(drm(y ~ x, data = mydf,logDose = 10, fct = LL.4(names = c("Slope", "Lower Limit", "Upper Limit", "ED50"))))
#  myMod_sum = try(as.numeric(mselect(myLL,icfct = AIC)))
if (sum(is.na(myLL) == 0) & regexpr("Error",myLL[1]) == -1){
mysd=sqrt(summary(myLL)$resVar) # NEW
mymu=fitted(myLL)[grep(T,x==min(x))[1]] #NEW
mycoef=summary(myLL)$coef[,1]
#LL4_AIC=myMod_sum[2]
#LL4_resvar=myMod_sum[4]
LL4_AIC <- AIC(myLL);
LL4_RSS <- modelFit(myLL)[2,2]
b=mycoef[1]
c=mycoef[2]
d=mycoef[3]
ED50=mycoef[4]
finf=c*(sign(b)==1)+d*(sign(b)==-1)
f0=d*(sign(b)==1)+c*(sign(b)==-1)
if (finf>f0){target=mymu+mysd}
if (finf<f0){target=mymu-mysd}
myED=try(ED(myLL,target,type="absolute",interval="delta"))
pod <- ifelse(myED[1] < 10^min(x),NA,ifelse(myED[1]> 10^max(x), NA, myED[1]))
#pod=myED[1]
podSE=myED[2]
podlower=myED[3]
podupper=myED[4]
myED[1]<-round(pod,5)
if (plot.it==T){
plot(myLL, broken=FALSE, xlab="Dose (mM)", ylab="Log2 (Mean Centered Normalized Counts)",type="all",col=2,cex=1.5,pch=7)
#title(main=paste0("LL.4: ", mydata$id[1]),sub=paste0("log10(LL.4_POD) = ",round(log10(myED[1]),2)," mM"))
mtext(paste0("LL4.AIC=",round(LL4_AIC,2),"; ResVar=",round(LL4_RSS,2)),cex=.7)
if (show.pod==T){
abline(h=target,col="purple",lwd=2,lty=2)
abline(v=log10(pod),col="red",lwd=2)
abline(h=0,col="black",lwd=2)
}
}
}
return(list(pod=log10(pod),podSE=podSE,podlower=podlower,podupper=podupper,LL4_AIC=LL4_AIC,LL4_RSS=LL4_RSS))
i=i+1
}
set.seed(1)
x= 1:5
y=x+rnorm(length(x))
getpod.2(x,y,plot.it=T,show.pod=T)
getpod.2=function(x,y,plot.it=F,show.pod=F){
pod=NA;  podSE=NA;  podlower=NA;  podupper=NA; LL4_AIC=NA; LL4_RSS=NA
mydf=data.frame(x,y)
#mysd=sd(y[x==min(x)])
#mymu=mean(y[x==min(x)])
myLL = try(drm(y ~ x, data = mydf,logDose = 10, fct = LL.4(names = c("Slope", "Lower Limit", "Upper Limit", "ED50"))))
#  myMod_sum = try(as.numeric(mselect(myLL,icfct = AIC)))
if (sum(is.na(myLL) == 0) & regexpr("Error",myLL[1]) == -1){
mysd=sqrt(summary(myLL)$resVar) # NEW
mymu=fitted(myLL)[grep(T,x==min(x))[1]] #NEW
mycoef=summary(myLL)$coef[,1]
#LL4_AIC=myMod_sum[2]
#LL4_resvar=myMod_sum[4]
LL4_AIC <- AIC(myLL);
LL4_RSS <- modelFit(myLL)[2,2]
b=mycoef[1]
c=mycoef[2]
d=mycoef[3]
ED50=mycoef[4]
finf=c*(sign(b)==1)+d*(sign(b)==-1)
f0=d*(sign(b)==1)+c*(sign(b)==-1)
if (finf>f0){target=mymu+mysd}
if (finf<f0){target=mymu-mysd}
myED=try(ED(myLL,target,type="absolute",interval="delta"))
pod <- ifelse(myED[1] < 10^min(x),NA,ifelse(myED[1]> 10^max(x), NA, myED[1]))
#pod=myED[1]
podSE=myED[2]
podlower=myED[3]
podupper=myED[4]
myED[1]<-round(pod,5)
if (plot.it==T){
plot(myLL, broken=FALSE, xlab="Dose (mM)", ylab="Log2 (Mean Centered Normalized Counts)",type="all",col=2,cex=1.5,pch=7)
title(main=paste0("log10(LL.4_POD) = ",round(log10(myED[1]),2)," mM"))
mtext(paste0("LL4.AIC=",round(LL4_AIC,2),"; ResVar=",round(LL4_RSS,2)),cex=.7)
if (show.pod==T){
abline(h=target,col="purple",lwd=2,lty=2)
abline(v=log10(pod),col="red",lwd=2)
abline(h=0,col="black",lwd=2)
}
}
}
return(list(pod=log10(pod),podSE=podSE,podlower=podlower,podupper=podupper,LL4_AIC=LL4_AIC,LL4_RSS=LL4_RSS))
i=i+1
}
set.seed(1)
x= 1:5
y=x+rnorm(length(x))
getpod.2(x,y,plot.it=T,show.pod=T)
fitted(myLL)
mymu
library(caret)
arcene <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/arcene/ARCENE/arcene_train.data", sep = " ",
colClasses = c(rep("numeric", 10000), "NULL"))
arcene$class <- factor(scan("https://archive.ics.uci.edu/ml/machine-learning-databases/arcene/ARCENE/arcene_train.labels", sep = "\t"))
any(is.na(arcene))
set.seed(100)
myfolds <- createMultiFolds(arcene$class, k = 5, times = 10)
control <- trainControl("repeatedcv", index = myfolds, selectionFunction = "oneSE")
mod1 <- train(class ~ ., data = arcene,
method = "pls",
metric = "Accuracy",
tuneLength = 20,
trControl = control,
preProc = c("zv","center","scale"))
plot(mod1)
mod2 <- train(class ~ ., data = arcene,
method = "lda",
metric = "Accuracy",
trControl = control,
preProc = c("zv","center","scale","pca"))
system.time(mod3 <- train(class ~ ., data = arcene,
method = "ranger",
metric = "Accuracy",
trControl = control,
tuneGrid = data.frame(mtry = seq(10,.5*ncol(arcene),length.out = 6)),
preProc = c("zv","center","scale")))
1717/60
models <- resamples(list("PLS-DA" = mod1, "PCA-DA" = mod2, "RF" = mod3))
bwplot(models, metric = "Accuracy")
plot(varImp(mod1), 10, main = "PLS-DA")
plot(varImp(mod2), 10, main = "PCA-DA")
plot(varImp(mod1), 10, main = "PLS-DA")
?train
library(caretNWS)
install.packages("caretNWS")
install.packages("nws")
libary(caretNWS)
library(caretNWS)
install.packages("caretNWS")
libary(doMC)
library(doMC)
install.packages("doMC")
library(foreach)
install.packages("ISLR")
library(ISLR)
income
load(income)
Income
load(Income)
load("Income")
install.packages("gmp")
library(gmp)
read.table(text="a,b
1123363730,5000000000000011111",sep=",",header=TRUE)
mytable<-read.table(text="a,b
1123363730,5000000000000011111",sep=",",header=TRUE)
mytable<-read.table(text="a,b
1123363730,5000000000000011111",sep=",")
as.bigz(mytable)
as.bigz(mytable$V2)
mytable
install.packages("bit64")
library(bit64)
tst <- read.table(text="a,b
1123363730,5000000000000000000111111", sep=",",
header=TRUE, colClasses = "integer64")
print(tst)
tst <- read.table(text="a,b
1123363730,5000000000000011111",sep=",",
header=TRUE, colClasses = "integer64")
print(tst$b)
tst <- read.table(text="a,b
1123363730,5000000000000000000000011111",sep=",",
header=TRUE, colClasses = "integer64")
print(tst$b)
tst <- read.table(text="a,b
1123363730,50000000000000011111",sep=",",
header=TRUE, colClasses = "integer64")
print(tst$b)
tst <- read.table(text="a,b
1123363730,5000000000000011111",sep=",",
header=TRUE, colClasses = "integer64")
print(tst$b)
tst <- read.table(text="a,b
1123363730,5000000000000000555555",sep=",",
header=TRUE, colClasses = "integer64")
print(tst$b)
tst <- read.table(text="a,b
1123363730,5000000000000000555555",sep=",",
header=TRUE, colClasses = "integer128")
test = data.frame(x = c(1:4),
y = c("/abc/werts/h1-1234", "/abc/fghye/seths/h2-234",
"/abc/gvawrttd/hyeadar/h3-9868", "/abc/qqras/x1-7653"))
test$y = as.character(test$y)
test
sapply(strsplit(test$y, "/"), tail, 1)
sapply(strsplit(test$y, "/"), tail, 2)
sapply(strsplit(test$y, "/"), tail, 3)
test
regexpr("/",test$y)
library(stringr)
str_locate_all("/",test$y)
str_locate_all("/",start=test$y,end=test$y)
str_locate_all
?str_locate_all
str_locate_all(test$y,"/"
sapply(strsplit(test$y, "/"), tail, 3)
str_locate_all(test$y,"/")
str_locate(test$y,"/")
str_extract_all(test$y, "/")
str_locate_all(test$y, "/")
df1 = data.frame(
"X1" = c(055154, 79058, 706361, 4503488  ),
"X2" = c("b","b","b","b"),
"X3" = c("20170622T085301.327Z","20170610T140234.216Z","20170629T203257.456Z", "20170628T123554.810Z" ),
"X4" = c("DE","RU","SA","AR"),
"X5" = c("","20170610T140116.895Z","20170628T231057.963Z","20170213T160904.549Z"),
"X6" = c("",109,"",160.10))
df1
package.list<-c("tidyverse","minfi")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
vignette("minfi")
package.list<-c("tidyverse","minfi","compare","IlluminaHumanMethylation450kmanifest","foreign","R.utils",
"data.table","MASS","sandwich","lmtest","parallel","matrixStats","FlowSorted.Blood.450k",
"Biobase","sva","knitr","gridExtra")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
bioc.package.list <- c("FlowSorted.Blood.450k", "sva")
biocLite(bioc.package.list)
package.list<-c("tidyverse","minfi","compare","IlluminaHumanMethylation450kmanifest","foreign","R.utils",
"data.table","MASS","sandwich","lmtest","parallel","matrixStats",
"Biobase","sva","knitr","gridExtra")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
library(bioc.package.list)
library("FlowSorted.Blood.450k", "sva")
sessionInfo()
setwd("C:/TEMP")
setwd("C:/Users/jshouse/Google_Drive/NEST-House Analyses/R SCRIPTS/methylation")
covs <-  read.table("Nest_II_R21_450k_17AUG17.csv", sep = ",", header = T,stringsAsFactors = F)
View(covs)
setwd("C:/TEMP/NEST_methylation/")
library(haven)
setwd("C:/TEMP/NEST_methylation/")
dd_covfile <- read.csv("SampleSheets/SampleSheetUpdated-Jima rlm.csv")
dd_covfile %>% mutate(basename = paste0(Array,"_",Slide)) %>% dd_covfile
dd_covfile %>% mutate(basename = paste0(Array,"_",Slide)) -> dd_covfile
View(dd_covfile)
indir <- "RawData"
bName <- file.path(indir, dd_covfile$basename)
rm(covs)
rgset <- read.metharray(bName, verbose = TRUE)
list.files()
list.files(RawData)
list.files(/RawData)
C:/TEMP/NEST_methylation/RawData
baseDir <- system.file("C:/TEMP/NEST_methylation/RawData")
baseDir
list.files(baseDir)
?system.file
baseDir <- <- "C:/TEMP/NEST_methylation/RawData"
baseDir <- "C:/TEMP/NEST_methylation/RawData"
list.files(baseDir)
list.files(baseDir)
list.files(file.path(baseDir, "8622007044"))
targets<-read.methyarray.sheet(baseDir)
targets<-read.metharray.sheet(baseDir)
targets
View(targets)
file.path
file.path()
file.path(indir)
dd_covfile
dd_covfile %>% mutate(BaseName = paste0(Array,"_",Slide)) -> dd_covfile
bName <- file.path(baseDir, targets_birthweight$BaseName)
bName <- file.path(baseDir, dd_covfile$BaseName)
bName
rgset <- read.metharray(bName, verbose = TRUE)
View(targets)
targets$Basename <- paste0("C:/TEMP/NEST_methylation/RawData/",targets$Array,"/",targets$Array,"_",targets$Slide)
View(targets)
head(targets$Basename)
RGset <- read.metharray.exp(targets = targets)
RGset <- read.metharray.exp(targets = targets$Basename)
RGset <- read.metharray.exp(targets = targets)
View(targets)
targets$Basename <- paste0("/RawData/",targets$Array,"/",targets$Array,"_",targets$Slide)
head(targets$Basename)
RGset <- read.metharray.exp(targets = targets)
getwd()
list.files(/RawData/8622007133/)
list.files(/RawData/8622007133)
list.files(RawData/8622007133)
dir()
list.files(/RawData)
targets$Basename <- paste0("RawData/",targets$Array,"/",targets$Array,"_",targets$Slide)
head(targets$Basename)
RGset <- read.metharray.exp(targets = targets)
baseDir <- "C:/TEMP/NEST_methylation/RawData"
list.files(baseDir)
targets<-read.metharray.sheet(baseDir)
targets$Basename <- paste0("RawData/",targets$Array,"/",targets$Array,"_",targets$Slide)
targets
targets<-read.metharray.sheet(baseDir)
targets$Basename
targets<-read.metharray.sheet(baseDir)
targets$Basename
list.files(baseDir)
baseDir <- "C:/TEMP/NEST_methylation/RawData"
list.files(baseDir)
targets<-read.metharray.sheet(baseDir)
targets$Basename
RGset <- read.metharray.exp(targets = targets)
View(targets)
C:/TEMP/NEST_methylation/RawData/8942297061/8942297061_R06C01
targets2 <- read.csv(file.path(baseDir,"SampleSheet.csv"), stringsAsFactors = F)
head(targets2)
targets2$Basename <- file.path(baseDir, targets2$Sentrix_ID,
paste0(targets2$Sentrix_ID,
targets2$Sentrix_Position))
View(targets2)
View(targets)
RGset <- read.metharray.exp(targets = targets2)
targets2$Basename <- file.path(baseDir, targets2$Sentrix_ID,
paste0(targets2$Sentrix_ID,"_",
targets2$Sentrix_Position))
RGset <- read.metharray.exp(targets = targets2)
test<-"C:/TEMP/NEST_methylation/RawData/8942326155/8942326155_R01C01_Grn.idat"
RGset <- read.metharray(targets2$Basename, verbose= TRUE)
data(minfiData)
library(minfiData)
baseDir <- system.file("extdata",package="minfiData")
targets <- read.450k.sheet(baseDir)
targets <- read.metharray.sheet(baseDir)
View(targets)
RGSet <- read.450k.exp(base = baseDir, targets = targets)
RGSet <- read.metharray.exp(base = baseDir, targets = targets)
setwd("C:/TEMP/NEST_methylation/")
baseDir <- "RawData"
baseDir <- "/RawData"
sessionInfo
sessionInfo()
list.files(baseDir)
baseDir <- "/RawData"
targets2 <- read.csv(file.path(baseDir,"SampleSheet.csv"), stringsAsFactors = F)
baseDir <- "RawData"
targets2 <- read.csv(file.path(baseDir,"SampleSheet.csv"), stringsAsFactors = F)
head(targets2)
head(targets2[,10:11])
targets2$Basename <- file.path(baseDir, targets2$Sentrix_ID,
paste0(targets2$Sentrix_ID,"_",
targets2$Sentrix_Position))
head(targets2[,c(10,11,21)])
RGset <- read.metharray(targets2$Basename, verbose= TRUE)
list.files("RawData/8622007016/")
list.files("RawData/8622007016/*.idat")
list.files("RawData/8622007016/",pattern='\\.idat')
list.files("RawData/8622007191/",pattern='\\.idat')
RGset <- read.metharray(targets2$Basename, verbose= TRUE)
list.files("RawData/8622007191/",pattern='\\.idat')
View(targets2)
list.files("RawData/*/",pattern='\\.idat')
RGset <- read.metharray(targets2$Basename[1:2], verbose= TRUE)
list.files("RawData/8622007191/",pattern='\\.idat')
vignette('minfi')
RGset <- read.metharray(targets2$Basename[1:10], verbose= TRUE)
list.files("RawData/8622007191/",pattern='\\.idat')
RGset
pd <- pData(RGset)
PD
pd
RGset2 <- read.methyarray.exp(baseDir,recursive = TRUE)
RGset2 <- read.metharray.exp(baseDir,recursive = TRUE)
pData(RGset2)
annotation(RGsetEx)
illumina_RGset <- preprocessIllumina(RGset)
test <- getBeta(illumina_RGset)
dim(test)
test[1:10,1:10]
sum(apply(test,1,function(x) sum(is.na(x))==10))
sum(apply(test,1,function(x) sum(is.na(x))==1))
test2 <- getBeta(preprocessRaw(RGset))
test2[1:10,1:10]
test3 <- getBeta(preprocessQuantile(RGset))
test3[1:10,1:10]
detP(detectionP(test3))
detP<-detectionP(test3)
detP<-detectionP(RGset)
View(detP)
package.list <- c("tidyverse","stringr","plyr","reshape2","RColorBrewer","pheatmap","gplots")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
## setwd("H:/My Documents/Google Drive/TempOSeq_Pipeline/test")
setwd("C:/Users/jshouse/Google_Drive/TempOSeq_Pipeline/test")
raw_count_data <- read.csv(file = "Input Files/raw_counts.csv",header=T,stringsAsFactors = F, row.names = 1) %>% as.data.frame()
hash <- read.csv(file = "Input Files/hashfile_v.csv",stringsAsFactors = FALSE,header=T,row.names=11)
### remove flagged rows from hash file as well as selecting only columns we need ###
hash1 <- subset(hash, is.na(DoNotUse), select=c(ID, Index.Set, X96wp.position, Treatment, Sample.ID, DOSE, Replicate))
### check for missing values in any column ###
try(if(sum(apply(hash1,2,anyNA)) > 0) stop("You have missing values in Hash table, Please fix"))
### replace all non-standard characters in treatment name with '_'   ( could also use  |[:space:]  in clause to replace spaces###
hash1$Treatment <- str_replace_all(hash1$Treatment,"[:punct:]","_")
### Create lowest level of experiment. This is one level up from replicates ####
### This is also the normal defining level for DESeq2 to do contrasts for DEGs analysis ###
hash1$group <- factor(paste0(hash1$Index.Set,"_",hash1$Treatment))
### create numeric dose for use in linear modeling with DESeq2 ###
hash1$numeric_dose <- as.numeric(as.character(hash1$DOSE))
### Raw counts read in added 'X' to first position of each column name because doesn't like starting with 0 ###
### Adding same X to rownames of hash file ###
rownames(hash1)<-paste0("X",rownames(hash1))
### subset count matrix by the rows left in hash1 AND in the same order! ###
finalcounts <- raw_count_data[,rownames(hash1)]
### check for NA's in count matrix
if(sum(is.na(as.matrix(finalcounts))) > 0) stop("Final Count Matrix has NA, please fix")
### confirm our colnames of count matrix match our rownames of coldata matrix ###
sum(rownames(hash1)!=colnames(finalcounts))
### REMOVE TRANSCRIPTS THAT HAVE 0 OR 1 as a rowSum across experiment ###
counts_clean1 <- finalcounts[rowSums(finalcounts)>1,]; nrow(counts_clean1)
### Assess Well counts ###
### Summarize Each Column Total ###
hash1$col_totals <- colSums(counts_clean1)
hash1$raw_reads <- ifelse(hash1$col_totals < 100000, "<100k",
ifelse(hash1$col_totals >= 100000 & hash1$col_totals < 200000, "100k-200k",
ifelse(hash1$col_totals >= 200000 & hash1$col_totals < 500000, "200k-500k",
ifelse(hash1$col_totals >= 500000 & hash1$col_totals < 1000000, "500k-1m", ">1m"))))
### Experimental Wells to be removed because of Low Total counts  #######
raw_count_cutoff <- 100000
write.csv(subset(hash1, hash1$col_totals <= raw_count_cutoff),file="Output Files/RawCountResults/low_count_report.csv")
qc_hash<-subset(hash1, hash1$col_totals > raw_count_cutoff)
qc_counts <- counts_clean1[,rownames(qc_hash)]
qc_counts <- qc_counts[rowSums(qc_counts)>1,];nrow(qc_counts)
qc_hash$Treatment <- factor(qc_hash$Treatment)
sum(rownames(qc_hash)!=colnames(qc_counts))
counts<-qc_counts
attrs<-qc_hash
attrs$ID2 <- paste0(attrs$group,"_",attrs$Replicate)
head(attrs)
media_counts <- counts[,rownames(subset(attrs,Treatment == "VEHICLE"))]
### Replacing names of count data with the ID2 variable that matches the rownname of the hash file (attrs) ###
mm <- match(names(media_counts),rownames(attrs))
names(media_counts)[!is.na(mm)] <- as.character(attrs$ID2[na.omit(mm)])
media_counts <- media_counts[rowSums(media_counts)>0,]
media_counts_lib_size <- apply(media_counts,2,function(x) x/sum(x))
my_color<-c(rep(1,6),rep(2,6),rep(3,6),rep(4,6))
pcamatrix<-as.matrix(media_counts_lib_size)
p = prcomp((t(scale(t(pcamatrix)))),center = FALSE)
pc <- unclass(p$rotation)[,1:3]
p_var = (round(100*(p$sdev^2 / sum(p$sdev^2)),1))[1:3]
library(scatterD3);library(plot3D)
scatter3D(x=pc[,1],y=pc[,2],z=pc[,3],colvar=NULL,col=my_color,cex=3,btw="b2",pch=16,ticktype="detailed",main="First 3 PCs Media Plate Controls",xlab=paste0("PC1 - ",p_var[1],"% Variance"),ylab=paste0("PC2 - ",p_var[2],"% Variance"),zlab=paste0("PC3 - ",p_var[3],"% Variance"))
legend("right",inset=c(.10,0),c("Plate A", "Plate B", "Plate E", "Plate D"), pch=16, cex=1, bty="n",col=seq(1:4),horiz=F)
cormatrix<-cor(pcamatrix)
par(mar=c(5,5,5,5))
hist(cormatrix[,1],main="Vehicle Control Correlations", xlab=NULL,col="grey",cex.axis=2,cex.lab=2,cex.main=2)
cor_media<-cor(media_counts_lib_size)
meancors <- data.frame(rownames(cor_media),rowMeans(cor_media))
meancors <- arrange(meancors,rowMeans.cor_media.)
hist(meancors$rowMeans.cor_media.)
hash2<-hash
rownames(hash2)<-paste0("X",rownames(hash2))
fc <- raw_count_data[,rownames(hash2)]
hash2$well_reads <- colSums(fc)
all.letters<-LETTERS[1:26]
mapds<- hash2 %>% select(Index.Set, X96wp.position,Treatment,Sample.ID,well_reads) %>%
mutate(row_letter=substr(X96wp.position,1,1),
column_num=substr(X96wp.position,2,3))
mapds$rl <- ifelse(mapds$Index.Set %in% c("A","B"), mapds$row_letter, all.letters[match(mapds$row_letter,all.letters)+8])
mapds$cn <- ifelse(mapds$Index.Set %in% c("A","C"), mapds$column_num, as.character(as.numeric(mapds$column_num) + 12))
hm_counts<- dcast(rl~cn,data=mapds,value.var = "well_reads",fill=NA)
row.names(hm_counts) <- hm_counts[,1]
trt_matrix<-dcast(rl~cn,data=mapds,value.var="Treatment")
sample_matrix<-dcast(rl~cn,data=mapds, value.var="Sample.ID")
library(pheatmap); library(RColorBrewer)
b<-as.matrix(hm_counts[,-1])
b<-ifelse(b<100000,abs(rnorm(384,500000,250000)),b)
b<-b/100000
b<-ifelse(b<1,NA,b)
bcolors<- colorRampPalette(c("yellow","orange","purple"), space = "rgb")(15)
pheatmap((as.matrix(b)), display_numbers = T, fontsize_number=12,number_format="%.1f", cluster_rows=FALSE, cluster_cols = FALSE, color=bcolors, main="Simulated Full Count Matrix (100,000s) \n White Cells < 100,000 Total Reads")
setwd("C:/Users/jshouse/Google_Drive/TempOSeq_Pipeline/ht_cba_manuscript/")
pdf(file="Output Files/RawCountResults/heatmap_plate.pdf",height= 4.5, width=10.5)
pheatmap((as.matrix(b)), display_numbers = T, fontsize_number=12,number_format="%.1f", cluster_rows=FALSE, cluster_cols = FALSE, color=bcolors, main="Simulated Full Count Matrix (100,000s) \n White Cells < 100,000 Total Reads")
dev.off()
