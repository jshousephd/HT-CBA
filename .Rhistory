print(tst$b)
tst <- read.table(text="a,b
1123363730,5000000000000000555555",sep=",",
header=TRUE, colClasses = "integer128")
test = data.frame(x = c(1:4),
y = c("/abc/werts/h1-1234", "/abc/fghye/seths/h2-234",
"/abc/gvawrttd/hyeadar/h3-9868", "/abc/qqras/x1-7653"))
test$y = as.character(test$y)
test
sapply(strsplit(test$y, "/"), tail, 1)
sapply(strsplit(test$y, "/"), tail, 2)
sapply(strsplit(test$y, "/"), tail, 3)
test
regexpr("/",test$y)
library(stringr)
str_locate_all("/",test$y)
str_locate_all("/",start=test$y,end=test$y)
str_locate_all
?str_locate_all
str_locate_all(test$y,"/"
sapply(strsplit(test$y, "/"), tail, 3)
str_locate_all(test$y,"/")
str_locate(test$y,"/")
str_extract_all(test$y, "/")
str_locate_all(test$y, "/")
df1 = data.frame(
"X1" = c(055154, 79058, 706361, 4503488  ),
"X2" = c("b","b","b","b"),
"X3" = c("20170622T085301.327Z","20170610T140234.216Z","20170629T203257.456Z", "20170628T123554.810Z" ),
"X4" = c("DE","RU","SA","AR"),
"X5" = c("","20170610T140116.895Z","20170628T231057.963Z","20170213T160904.549Z"),
"X6" = c("",109,"",160.10))
df1
install.packages("C:/Users/jshouse/LOCALDL/quadprog_1.5-5.tar.gz", repos = NULL, type="source", INSTALL_opts = "--merge-multiarch")
install.packages("C:/Users/jshouse/LOCALDL/quadprog_1.5-5.tar.gz", repos = NULL, type="source", INSTALL_opts = "--merge-multiarch")
install.packages("C:/Program Files/Microsoft/R Open/R-3.4.0/quadprog_1.5-5.tar.gz", repos = NULL, type="source", INSTALL_opts = "--merge-multiarch")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
opts_knitr$set(root.dir = "C:/TEMP/NEST_methylation/")
knitr::opts_chunk$set(echo = TRUE)
opts_knitr$set(root.dir = "C:/TEMP/NEST_methylation/")
knitr::opts_knitr$set(root.dir = "C:/TEMP/NEST_methylation/")
opts_knitr$set(root.dir = "C:/TEMP/NEST_methylation/")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
opts_knitr$set(root.dir = "C:/TEMP/NEST_methylation/")
```
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
```
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
library(knitr)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
package.list<-c("tidyverse","minfi","compare","IlluminaHumanMethylation450kmanifest","foreign","R.utils",
"data.table","MASS","sandwich","lmtest","parallel","matrixStats","stringr",
"Biobase","sva","knitr","gridExtra","haven")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
# source("https://bioconductor.org/biocLite.R")
# bioc.package.list <- c("FlowSorted.Blood.450k", "sva")
# biocLite(bioc.package.list)
library("FlowSorted.Blood.450k", "sva")
baseDir <- "RawData"
targets <- read.metharray.sheet(baseDir)
targets <- read.metharray.sheet(baseDir)
head(targets,2)
RGSet <- read.metharray.exp(targets = targets)
phenoData <- pData(RGSet)
head(phenoData)
manifest <- getManifest(RGSet)
manifest
head(getProbeInfo(manifest))
cellCounts <- estimateCellCounts(RGSet)
View(cellCounts)
head(cellCounts)
hist(cellCounts$CD8T)
save(as.data.frame(cellCounts),file="cellCounts"
head(cellCounts)
save(as.data.frame(cellCounts),file="cellCounts")
save(as.data.frame(cellCounts),file="cellCounts.RData")
as.data.frame(cellCounts)
head(phenoData)
head(getProbeInfo(manifest))
head(phenoData)
cc <- as.data.frame(cellCounts)
cellcounts <- as.data.frame(cellCounts)
save(cellcounts,file="cellcounts.RData")
save(phenoData,file="phenoData.RData")
hist(cellcounts$CD8T)
View(phenoData)
apply(cellcounts,2,hist())
apply(cellcounts,2,hist)
par(mfrow=c(3,2))
apply(cellcounts,2,hist)
cellcounts
apply(cellcounts,2,function(x) hist(x,main=name(x)))
apply(cellcounts,2,function(x) hist(x,main=names(x)))
par(mfrow=c(3,2))
for (i in 1:ncol(cellcounts)){
hist(cellcounts[i])
}
ncol(cellcounts)
for (i in 1:ncol(cellcounts)){
hist(cellcounts[i])
}
for (i in 1:ncol(cellcounts)){
hist(cellcounts[,i])
}
for (i in 1:ncol(cellcounts)){
hist(cellcounts[,i],main=paste0("Histograme of ", names(cellcounts)[i]))
}
hist(cellcounts[,i],main=paste0("Histogram of ", names(cellcounts)[i]), xlab="")
rowSums(cellcounts)
hist(rowSums(cellcounts))
MSet <- preprocessRaw(RGSet)
MSet
RSet <- ratioConvert(MSet)
beta  <- getBeta(RSet)
GRset <- mapToGenome(RSet)
GRset <- mapToGenome(RSet)
```
GRset
annotation <- getAnnotation(GRset)
save(annotation, file = "annotation.RData")
plotQC(getQC(MSet))
View(phenoData)
plotSex(getSex(GRset, cutoff = -2))
addSex(GRset)
phenoData(GRset)
phenoData <- pData(GRset)
View(phenoData)
controlStripPlot(RGSet, controls="BISULFITE CONVERSION II")
package.list <-
c("tidyverse",
"stringr",
"scatterD3",
"plot3D",
"PerformanceAnalytics")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
package.list <- c("DESeq2", "BiocParallel", "dplyr", "ggplot2")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
package.list <-
c(
"tidyverse",
"matrixStats",
"dendextend",
"reshape2",
"corrplot",
"gplots",
"d3heatmap",
"scatterplot3d",
"plot3D",
"scatterD3"
)
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
package.list <- c("tidyverse", "reshape2", "mcc", "wrapr")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
package.list <- c("tcpl", "tidyverse", "reshape2")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
package.list <-
c("reshape2", "tidyverse", "RColorBrewer", "stringr")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
sessionInfo()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
package.list<-c("tidyverse","minfi","compare","IlluminaHumanMethylation450kmanifest","foreign","R.utils",
"data.table","MASS","sandwich","lmtest","parallel","matrixStats","stringr",
"Biobase","sva","knitr","gridExtra","haven")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))}
lapply(package.list, require, character.only = TRUE )
library("FlowSorted.Blood.450k", "sva")
baseDir <- "RawData"
targets <- read.metharray.sheet(baseDir)
getwd()
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
getwd()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
getwd()
getwd()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
getwd()
knitr::opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
getwd()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/TEMP/NEST_methylation/")
getwd()
knitr::opts_knit$set(root.dir = normalizePath"C:/TEMP/NEST_methylation/"))
knitr::opts_knit$set(root.dir = normalizePath("C:/TEMP/NEST_methylation/"))
getwd()
---
title: "Cleaning NEST2 Data with minfi"
author: "John S. House"
date: "August 27, 2017"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/TEMP/NEST_methylation/"))
```
---
title: "Cleaning NEST2 Data with minfi"
author: "John S. House"
date: "August 27, 2017"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/TEMP/NEST_methylation/"))
```
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/TEMP/NEST_methylation/"))
getwd()
library(haven)
library(readxl)
read_excel("C:/Users/jshouse/Desktop/dementia.xlsx",sheet="data",)
read_excel("C:/Users/jshouse/Desktop/dementia.xlsx",sheet="data")
country_data <- read_excel("C:/Users/jshouse/Desktop/dementia.xlsx",sheet="data")
fit <- glm(data=country_data, AD_Dementia ~ bmi_2014 + kkcal + pcarb)
summary(fit)
View(country_data)
plot(country_data$AD_Dementia,country_data$pcarb)
plot(country_data$AD_Dementia,country_data$pfat)
cor(country_data)
cor(country_data[,-1])
mydata <- filter(country_data, !is.na(AD_Dementia) | !is.na(bmi_2014))
mydata <- filter(country_data, !is.na(AD_Dementia) & !is.na(bmi_2014))
library(tiderverse)
library(tidyverse)
mydata <- filter(country_data, !is.na(AD_Dementia) & !is.na(bmi_2014))
View(mydata)
fit <- glm(data=mydata, AD_Dementia ~ bmi_2014 + kkcal + pcarb)
summary(fit)
plot(country_data$AD_Dementia,country_data$kkcal)
fit <- glm(data=mydata, AD_Dementia ~ bmi_2014 + kkcal + pcarb + pprotein)
summary(fit)
fit <- glm(data=mydata, AD_Dementia ~ bmi_2014 + kkcal + pcarb + pfat)
summary(fit)
plot(mydata$pcarb,mydata$AD_Dementia)
plot(mydata$pfat, mydata$AD_Dementia)
plot(fit)
regression=function(y,x){
# n is the number of observations
# p is the number of predictors, i.e. columns of x
# standard regression assumes x has a column of 1s for the intercept
n=length(y)
p=dim(x)[2]
xTx.inv=solve(t(x)%*%x)
betahat=as.vector(xTx.inv%*%t(x)%*%y)
resid=as.vector(y-x%*%betahat)
varhat=(sum(resid^2))*diag(xTx.inv)/(n-p)
se=sqrt(varhat)
pval=2*pt(-abs(betahat/se),df=n-p)
pred.byx=t(t(x)*betahat)
partial.resid=resid+pred.byx
# I think partial.resid is what you want. Each column is a residual using all *other* columns as predictors
out=list(betahat,se,betahat/se,n-p,pval,resid,partial.resid)
names(out)=c("betahat","se","t","df","pval","resid","partial.resid")
return(out)
}
n=100
x1=rnorm(n)
x2=rnorm(n)
x3=rnorm(n)
x=cbind(1,x1,x2,x3)
y=x1+x2+rnorm(n)
lm(y~x1+x2+x3)
betahat=lm(y~x1+x2+x3)$coef
myreg=regression(y,x)
lm(myreg$partial.resid[,2]~x1)
resid1=myreg$partial.resid[,2]
resid1.1=y-betahat[1]-betahat[3]*x2-betahat[4]*x3
par(mfrow=c(2,1))
plot(x1,resid1)
plot(x1,resid1.1)
par(mfrow=c(1,1))
plot(x1,resid1)
plot(x1,resid1.1)
par(mfrow=c(1,2))
plot(x1,resid1)
plot(x1,resid1.1)
cor(x1,resid1)
cor(x1,resid1.1) # seems to work
ht <- function(x,rownum=5){
top <- head(x,rownum)
bottom <- tail(x,rownum)
middle <- c(rep("...",ncol(x)))
myview <- rbind(top,middle,bottom)
return(list(`rows by cols` = dim(x),data_preview = myview))
#return(myview)
}
ht(mtcars)
mtcars
ht(mtcars,3)
ht(mtcars,10)
read.csv(file="C:/TEMP/livertox.csv")
%>%
lt <- read.csv(file="C:/TEMP/livertox.csv")
plot(lt)
boxplot(lt)
install.packages("devtools")
library(devtools)
install_github("easyGgplot2", "kassambara")
ggplot2.boxplot(data=lt, xName='dose',yName='len', groupName='dose',
groupColors=c('#999999'), showLegend=FALSE,
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
library("easyGgplot2", "kassambara")
ggplot2.boxplot(data=lt, xName='dose',yName='len', groupName='dose',
groupColors=c('#999999'), showLegend=FALSE,
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
ggplot2.boxplot(data=lt[1], xName='dose',yName='len', groupName='dose',
groupColors=c('#999999'), showLegend=FALSE,
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
lt
ggplot2.boxplot(data=lt$grade, xName='dose',yName='len', groupName='dose',
groupColors=c('#999999'), showLegend=FALSE,
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",mean(data$lt)," Median=",median(data$lt))
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",mean(data$lt)," Median=",median(data$lt)),
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
mean(data$lt)
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",mean(lt$grade)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Liver Tox Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
lt <- read.csv(file="C:/Users/jshouse/Google_Drive/Teaching/TOX 701/2017/livertox.csv")
pdf(file="C:/Users/jshouse/Google_Drive/Teaching/TOX 701/2017/livertoxscores.pdf",height=5,width=3)
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Tox 701 - Hepatic Tox - 2017 Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
dev.off()
pdf(file="C:/Users/jshouse/Google_Drive/Teaching/TOX 701/2017/livertoxscores.pdf",height=5,width=4)
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Tox 701 - Hepatic Tox - 2017 Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
dev.off()
pdf(file="C:/Users/jshouse/Google_Drive/Teaching/TOX 701/2017/livertoxscores.pdf",height=5,width=5)
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Tox 701 - Hepatic Tox - 2017 Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
dev.off()
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Tox 701 - Hepatic Tox - 2017 Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
pdf(file="C:/Users/jshouse/Google_Drive/Teaching/TOX 701/2017/livertoxscores.pdf",height=5,width=5)
ggplot2.boxplot(data=lt$grade,
groupColors=c('#999999'), showLegend=FALSE,
mainTitle=paste0("Mean=",round(mean(lt$grade),2)," Median=",median(lt$grade)),
backgroundColor="white", xtitle="Tox 701 - Hepatic Tox - 2017 Scores", ytitle="Max Score = 10",
addDot=TRUE, dotSize=1,
removePanelGrid=TRUE,removePanelBorder=TRUE,
axisLine=c(0.5, "solid", "black"))
dev.off()
package.list <- c("tidyverse", "reshape2", "mcc", "wrapr")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
setwd("C:/Users/jshouse/Google_Drive/TempOSeq_Pipeline/manuscripttest/")
load("Output Files/Cleaned_data/qc_hash.RData")
qc_hash$header <- rownames(qc_hash)
load("Output Files/Cleaned_data/normcounts.RData")
normcounts <- as.data.frame(normcounts)
normcounts$X <- rownames(normcounts)
## First Create Tall Dataset using tidyr::gather
counts <- gather(normcounts, "X", "NormCounts")
names(counts) <- c("Gene", "header", "NormCounts")
## Merge hash file attributes and NormCounts ##
full_ds <- counts %>% left_join(. , qc_hash, by = "header") %>%
mutate(
DOSE = paste0("Dose_", numeric_dose),
Treatment_Dose_Rep = paste0(Treatment, "_", numeric_dose, "_", Replicate),
Treatment = as.character(Treatment),
trt_gene = paste0(Treatment, "_", Gene)
) %>%
select(trt_gene,
Gene,
NormCounts,
Treatment,
numeric_dose,
Treatment_Dose_Rep)
head(full_ds)
trtments <- full_ds %>% select(Treatment) %>%
filter(Treatment != "VEHICLE") %>%
unique() %>% .[, 1]
final_ds <- data.frame()
for (i in 1:length(trtments)) {
temp <- full_ds %>%
filter(Treatment %in% trtments[i] | Treatment == "VEHICLE") %>%
dcast(Gene ~ Treatment_Dose_Rep, value.var = "NormCounts") %>%
mutate(treatment = trtments[i],
trt_gene = paste0(trtments[i], "/", Gene))
names(temp)[c(2:4)] <- c("dose_0.1_1", "dose_1_1", "dose_10_1")
final_ds <- rbind(final_ds, temp)
}
head(final_ds)
package.list <- c("tcpl", "tidyverse", "reshape2")
if (length(setdiff(package.list, rownames(installed.packages()))) > 0) {
install.packages(setdiff(package.list, rownames(installed.packages())))
}
lapply(package.list, require, character.only = TRUE)
setwd("C:/Users/jshouse/Google_Drive/TempOSeq_Pipeline/ht_cba_manuscript")
load(file = "Output Files/Cleaned_data/stats.RData")
head(stats)
stats$id <- paste0(stats$treatment, "/", stats$probe)
## Select data with overall trend ##
adj_pval_cutoff <-
.15  ####change here if a more stringent Cutoff is desired ####
sp_flag_stats <- filter(stats, mcc_qval_all <= adj_pval_cutoff)
wilcox_flag <-
filter(sp_flag_stats, (Wilcoxon_qval <= adj_pval_cutoff) |
((Wilcoxon_qval <= adj_pval_cutoff) &
(mcc_qval_trt < adj_pval_cutoff)
))
wilcox_flag <-
filter(sp_flag_stats, (Wilcoxon_qval <= adj_pval_cutoff) |
((Wilcoxon_qval <= adj_pval_cutoff) &
(mcc_qval_trt > adj_pval_cutoff)
))
